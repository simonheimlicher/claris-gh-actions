name: Build Hugo Site
on:
  workflow_call:
    inputs:
      # The base URL on the custom domain of your Cloudflare Pages project
      BASE_URL:
        required: true
        type: string
      # The canonical base URL (only has an effect if it differs from the base URL)
      CANONICAL_BASE_URL:
        required: false
        type: string
      HUGO_VERSION:
        required: true
        type: string
      HUGO_ENVIRONMENT:
        required: true
        type: string
      DART_SASS_VERSION:
        required: true
        type: string
    secrets:
      HUGO_CLARIS_AUTHOR_EMAIL:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # Custom environment variables to support theme logic and deployment
      BRANCH_NAME: ${{ github.ref_name }}
      HUGO_BASE_URL: ${{ inputs.BASE_URL }}
      HUGO_CANONICAL_BASE_URL: ${{ inputs.CANONICAL_BASE_URL }}
      HUGO_VERSION: ${{ inputs.HUGO_VERSION }}
      HUGO_ENVIRONMENT: ${{ inputs.HUGO_ENVIRONMENT }}
      # For maximum backward compatibility with Hugo modules
      HUGO_ENV: ${{ inputs.HUGO_ENVIRONMENT }}
      HUGO_CACHE_DIR: hugo_cache
      HUGO_CACHE_KEY: hugo_cache
      HUGO_CLARIS_AUTHOR_EMAIL: ${{ secrets.HUGO_CLARIS_AUTHOR_EMAIL }}
      DART_SASS_VERSION: ${{ inputs.DART_SASS_VERSION }}
      ARTIFACT_PATH: public

    steps:
      # Define the `HUGO_CACHE_DIR` and `HUGO_CACHE_KEY` environment variables.
      # since the cache dir should be located in the runner's temporary
      # directory and it is OS-specific, we need access to `runner.temp` and
      # `runner.os`. This is only available in the `steps` section down here,
      # not in the `env` section above
      - name: Set Hugo cache dir and key with RUNNER_TEMP and RUNNER_OS
        run: |
          echo "HUGO_CACHE_DIR=${{ runner.temp }}/${{ env.HUGO_CACHE_DIR }}" >> "$GITHUB_ENV"
          echo "HUGO_CACHE_KEY=${{ env.HUGO_CACHE_KEY }}-${{ runner.os }}-${{ github.ref_name }}" >> "$GITHUB_ENV"

      - name: Debug Hugo cache settings
        run: |
          echo "HUGO_CACHE_DIR=$HUGO_CACHE_DIR"
          echo "HUGO_CACHE_KEY=$HUGO_CACHE_KEY"

      # Install Hugo extended version
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # Install Dart Sass for SCSS processing NOTE: Instead of the official Snap
      # method (`sudo snap install dart-sass`), we install from prebuilt
      # binaries to avoid issues indefinite hangs in GitHub-hosted runners.
      - name: Install Dart Sass
        run: |
          curl -LJO https://github.com/sass/dart-sass/releases/download/${{ env.DART_SASS_VERSION }}/dart-sass-${{ env.DART_SASS_VERSION }}-linux-x64.tar.gz
          tar -xf dart-sass-${{ env.DART_SASS_VERSION }}-linux-x64.tar.gz
          sudo cp -r dart-sass/* /usr/local/bin
          sudo chmod +x /usr/local/bin/sass
          rm -rf dart-sass*

      # Checkout project with all submodules for themes or dependencies
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Install Node.js dependencies if package-lock.json or similar exists
      - name: Install Node.js dependencies
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ] || [ -f yarn.lock ]; then
            npm ci
          fi

      # Check if Hugo'` `cacheDir` is properly configured
      - name: Check Hugo cache configuration
        id: hugo-cache-config
        run: |
          hugo config --format json \
            --cacheDir "${{ env.HUGO_CACHE_DIR }}" \
            | jq -r '.cachedir, .caches.images.dir, .resourcedir'

      # Restore Hugo's internal cache for faster builds (e.g. image processing)
      - name: Restore Hugo cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HUGO_CACHE_DIR }}
          key: ${{ env.HUGO_CACHE_KEY }}-${{ github.run_id }}
          restore-keys: ${{ env.HUGO_CACHE_KEY }}-

      # Check if hugo_stats.json exists (required for Hugo Claris theme)
      - name: Check for hugo_stats.json
        run: |
          if ! [ -f hugo_stats.json ]; then
            echo "Running hugo to create 'hugo_stats.json' as this required file is missing."
            hugo --gc --minify \
              --cacheDir "${{ env.HUGO_CACHE_DIR }}" \
              --baseURL "${{ env.HUGO_BASE_URL }}"
          fi
          if ! [ -f hugo_stats.json ]; then
            echo "Fatal error: Hugo failed to create hugo_stats.json"
            exit 1
          fi

      - name: Check size of Hugo resources after first run
        run: |
          du -sch resources/*/* || true

      - name: Check size of Hugo cache after first run
        run: |
          du -sch "${{ env.HUGO_CACHE_DIR }}"/*/* || true

      # Perform the final build using Hugo
      - name: Build with Hugo
        run: |
          hugo --gc --minify \
            --cacheDir "${{ env.HUGO_CACHE_DIR }}" \
            --baseURL "${{ env.HUGO_BASE_URL }}"

      - name: Check size of Hugo resources after final run
        run: |
          du -sch resources/*/* || true

      - name: Check size of Hugo cache after final run
        run: |
          du -sch "${{ env.HUGO_CACHE_DIR }}"/*/* || true

      # Upload the built site as an artifact for later deployment
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload: include branch name
          name: ${{ env.ARTIFACT_PATH }}-${{ env.BRANCH_NAME }}

          # The file, directory or wildcard pattern that describes what to upload
          path: ${{ env.ARTIFACT_PATH }}

          # Consider no files being found using the provided path an error
          # and fail the action with an error message
          if-no-files-found: error

      # Save Hugo cache after build
      #
      # NOTE: for the initial run, we need a fallback key, otherwise the restore
      # step fails
      - name: Debug Hugo cache key
        run: |
          echo "Hugo cache key: ${{ steps.cache-restore.outputs.cache-primary-key }}"
      - name: Save Hugo cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.HUGO_CACHE_DIR }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
