name: Build Hugo Site
on:
  workflow_call:
    inputs:
      hugo_version:
        required: true
        type: string
    secrets:
      HUGO_CLARIS_AUTHOR_EMAIL:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      HUGO_VERSION: ${{ inputs.hugo_version }}
      # Define the branch name variable
      BRANCH_NAME: ${{ github.ref_name }}

    steps:

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check for Node.js dependency files
        id: check-node
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ] || [ -f yarn.lock ]; then
            echo "NODE_CACHED=true" >> $GITHUB_ENV
          else
            echo "NODE_CACHED=false" >> $GITHUB_ENV
          fi

      - name: Set up node
        if: env.NODE_CACHED == 'false'
        uses: actions/setup-node@v4
        with:
          # Don't use cache, otherwise the build fails
          node-version: 20
  
      - name: Install required node modules
        if: env.NODE_CACHED == 'false'
        run: |
          npm install --save-dev postcss postcss-cli \
            autoprefixer \
            @fullhuman/postcss-purgecss \
            postcss-var-optimize

      - name: Install or fetch node modules from cache
        if: env.NODE_CACHED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Node.js dependencies
        if: env.NODE_CACHED == 'true'
        run: npm ci


      - name: Fetch resources from cache
        uses: actions/cache@v3
        with:
          path: resources
          key: ${{ runner.os }}-hugo-resources-${{ env.BRANCH_NAME }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-hugo-resources-${{ env.BRANCH_NAME }}-

      - name: Check for hugo_stats.json
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          HUGO_CLARIS_AUTHOR_EMAIL: ${{ secrets.HUGO_CLARIS_AUTHOR_EMAIL }}
        run: |
          if ! [ -f hugo_stats.json ]; then
            echo "Running hugo to create 'hugo_stats.json' as this required file is missing."
            hugo --gc --minify
          fi
          if ! [ -f hugo_stats.json ]; then
            echo "Fatal error: Hugo failed to create hugo_stats.json"
            exit 1
          fi

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          HUGO_CLARIS_AUTHOR_EMAIL: ${{ secrets.HUGO_CLARIS_AUTHOR_EMAIL }}
          ARTIFACT_PATH: path

        run: hugo --gc --minify

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: ${{ env.ARTIFACT_PATH }}-${{ env.BRANCH_NAME }}

          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: ${{ env.ARTIFACT_PATH }}

          # The desired behavior if no files are found using the provided path.
          # Available Options:
          #   warn: Output a warning but do not fail the action
          #   error: Fail the action with an error message
          #   ignore: Do not output any warnings or errors, the action does not fail
          # Optional. Default is 'warn'
          if-no-files-found: error

          # Duration after which artifact will expire in days. 0 means using default retention.
          # Minimum 1 day.
          # Maximum 90 days unless changed from the repository settings page.
          # Optional. Defaults to repository settings.
          retention-days: 90

          # The level of compression for Zlib to be applied to the artifact archive.
          # The value can range from 0 to 9.
          # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
          # Optional. Default is '6'
          compression-level: 0